# -*- coding: utf-8 -*-
"""Dynamic_Message_Generation_in_LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZTws_W8gK7hhxIkQt_kZFa9BMYDuWovv

# __Demo: Dynamic Message Generation in LangChain__

## __Steps to Perform:__
Step 1: Import the Necessary Components

Step 2: Define Message Templates

Step 3: Create a Chat Prompt with Placeholders

Step 4: Define the Conversation Messages

Step 5: Generate the Conversation

Step 6: Print the Conversation

### __Step 1: Import the Necessary Components__
- Import classes for creating message prompts and message objects from the Langchain library.
"""

from langchain.prompts import MessagesPlaceholder, HumanMessagePromptTemplate, ChatPromptTemplate
from langchain.schema.messages import HumanMessage, AIMessage

"""### __Step 2: Define Message Templates__
- Define a simple message prompt template with a placeholder for subjects and a more complex human message template for summarization.



"""

simple_prompt = "The {subject} is strong in this one."

human_prompt = "Summarize our conversation so far in {word_count} words."

"""### __Step 3: Create a Chat Prompt with Placeholders__
- Create a __ChatPromptTemplate__ that can hold a list of messages and includes both the simple and human message templates.


"""

simple_message_template = HumanMessagePromptTemplate.from_template(simple_prompt)
human_message_template = HumanMessagePromptTemplate.from_template(human_prompt)

chat_prompt = ChatPromptTemplate.from_messages([
    MessagesPlaceholder(variable_name="conversation"),
    simple_message_template,
    human_message_template
])

"""### __Step 4: Define the Conversation Messages__
- Create instances of __HumanMessage__ and __AIMessage__ to represent the conversation's human and AI parts, respectively.




"""

human_message = HumanMessage(content="What's the best way to learn a new language?")
ai_message = AIMessage(content="""\
1. Immerse yourself in the language: Try to use the language in your daily life as much as possible.
2. Practice regularly: Consistency is key when learning a new language.
3. Use language learning apps: There are many apps that can help you learn a new language in a fun and engaging way.\
""")

"""### __Step 5: Generate the Conversation__
- Use the __chat_prompt.format_prompt__ method to fill in the placeholders for the conversation history, subject, and word count for the summary, and convert the result into a list of message objects.


"""

conversation = chat_prompt.format_prompt(
    conversation=[human_message, ai_message],
    subject="Force",
    word_count="10"
).to_messages()

"""### __Step 6: Print the Conversation__

- Iterate over the message objects and print their content to display the dynamic conversation, including the simple message and the summarization request.
"""

for message in conversation:
    print(message.content)

"""## __Conclusion__
This code demonstrates an innovative approach to automating conversation creation, leveraging LangChain's capabilities to integrate predefined templates and dynamically generate context-adaptive dialogues.

This method simplifies the process of constructing complex conversations, showcasing the potential for creating flexible, responsive interactions in applications that require nuanced communication.





"""