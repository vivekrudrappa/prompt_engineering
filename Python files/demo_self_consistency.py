# -*- coding: utf-8 -*-
"""Demo_Self_Consistency.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Z_PaJfqgB5Sdsu2DGctPtT4wtV8aqSe

# __Demo: Self-Consistency Prompting with OpenAI__

## __Steps to Perform:__

Step 1: Set up the OpenAI API Key

Step 2: Define a Function to Get Completion

Step 3: Define Your Prompts

### __Step 1: Set up the OpenAI API Key__
- Import the required libraries and set up the OpenAI API key.
"""

import os
import openai
from google.colab import userdata

openai.api_key  = userdata.get('OPENAI_API_KEY')

"""### __Step 2: Define a Function to Get Completion__
- Construct a message with the user's prompt.
- Call the __openai.ChatCompletion.create__ method to get a response from the model.
- The temperature parameter is set to __0__ for deterministic (non-random) responses.
"""

def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message.content

"""### __Step 3: Evaluate the Output__
- Generate multiple lines of reasoning to answer the question.
- Ask the AI to evaluate these reasonings and determine the most consistent answer.
"""

prompt = """
Let's consider which is heavier: 1000 feathers or a 30-pound weight. I'll think through this in a few different ways and then decide which answer seems most consistent.

1. First line of reasoning: A single feather is very light, almost weightless. So, 1000 feathers might still be quite light, possibly lighter than a 30-pound weight.

2. Second line of reasoning: 1000 is a large number, and when you add up the weight of so many feathers, it could be quite heavy. Maybe it's heavier than a 30-pound weight.

3. Third line of reasoning: The average weight of a feather is very small. Even 1000 feathers would not add up to 30 pounds.

Considering these reasonings, the most consistent answer is:
"""

response = get_completion(prompt)
print(response)

"""You have learned how to use LangChain and OpenAI to generate creative content from prompts. You have also gained experience using self-consistency prompting to guide the modelâ€™s output."""