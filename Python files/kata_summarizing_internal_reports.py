# -*- coding: utf-8 -*-
"""Kata Summarizing Internal Reports.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UKrROGZZFDj8QFoppCy8IqGHsp4WijZJ
"""

# prompt: I want to create a solution for the following kata. please generate the python code using chat gpt API function call. Here is the Kata details below with mock sample report at the end
# Scenario: An organization needs concise summaries of lengthy internal reports for quick decision-making.​
# Challenge: Design a prompt that enables an AI model to generate clear and accurate summaries of complex documents.​
# Please use flow as below:
# Create Summarization Prompt: Develop a initial prompt instructing the AI to produce a summary highlighting key points and actionable insights for the sample report shared below.
# Test and Refine: Evaluate the AI-generated summary for completeness and clarity, refining the prompt as needed. Generate a new refined prompt.
# Ensure Confidentiality: Make sure the prompt and AI output do not disclose sensitive information inappropriately.​
# Here is the Sample Report for using it in the solution:
# “The Q2 sustainability audit revealed a 12% reduction in carbon footprint, primarily driven by solar infrastructure upgrades. However, water consumption increased by 6% due to expanded manufacturing processes. The team recommends piloting water-recycling initiatives and publishing ESG metrics in the annual shareholder report.”

# Assuming you have the necessary libraries and API key set up for a chat GPT model

import os
import openai
from google.colab import userdata


openai.api_key  = userdata.get('OPENAI_API_KEY')

# Load your API key from an environment variable
# Make sure you have your OpenAI API key set as an environment variable
# For example, in your terminal: export OPENAI_API_KEY='your-api-key'
# If running in Colab, you might need to set it like this: os.environ['OPENAI_API_KEY'] = 'your-api-key'
# However, it's generally safer to use Colab's Secrets feature for sensitive information
# Replace 'YOUR_OPENAI_API_KEY_NAME' with the name of your secret in Colab
# try:
#     client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
# except:
#     print("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable or use Colab Secrets.")
#     # You might want to exit or handle this error appropriately
#     client = None # Set client to None to avoid errors later


sample_report = """
The Q2 sustainability audit revealed a 12% reduction in carbon footprint, primarily driven by solar infrastructure upgrades. However, water consumption increased by 6% due to expanded manufacturing processes. The team recommends piloting water-recycling initiatives and publishing ESG metrics in the annual shareholder report.
"""

# --- Step 1: Create Initial Summarization Prompt ---
initial_prompt = f"""
Summarize the following report, focusing on key findings and recommendations.
Report:
{sample_report}
"""

print("Initial Prompt:")
print(initial_prompt)

# --- Step 2: Test and Refine (Simulated) ---
# In a real scenario, you would call the API here and review the output.
# For this example, we'll directly create a refined prompt based on the prompt design principles.

# Simulate API call (replace with actual API call if client is initialized)
# try:
#     if client:
#         response = client.chat.completions.create(
#             model="gpt-3.5-turbo", # Or another appropriate model
#             messages=[
#                 {"role": "system", "content": "You are a helpful assistant that summarizes reports."},
#                 {"role": "user", "content": initial_prompt}
#             ]
#         )
#         initial_summary = response.choices[0].message.content.strip()
#         print("\nInitial AI Summary (Simulated or Actual):")
#         print(initial_summary)
#     else:
#         print("\nSkipping initial API call as client is not initialized.")
#         initial_summary = "Simulated: Summary of the report, focusing on carbon reduction and water increase." # Placeholder
# except Exception as e:
#      print(f"\nError during initial API call: {e}")
#      initial_summary = "Simulated: Error encountered during summarization."


# Based on reviewing a hypothetical initial summary, we refine the prompt
# to be more specific about highlighting actionable insights and making it concise.
refined_prompt = f"""
Provide a concise executive summary of the following report.
Summarize in 3 sections: Achievements, Challenges, and Actionable Insights.
Focus on information crucial for decision-making.
Keep tone neutral and limit each section to 30 words. Do not include names or internal jargon.
Report:
{sample_report}
"""

print("\nRefined Prompt:")
print(refined_prompt)

# --- Step 3: Ensure Confidentiality ---
# The sample report is not sensitive, but in a real application:
# - Ensure the prompt itself does not contain confidential information unless absolutely necessary and with proper handling.
# - Avoid including PII or highly sensitive data in the prompt.
# - The AI model used should ideally have data privacy policies suitable for handling potentially sensitive inputs (though for this Kata, the sample is public).
# - The prompt formulation asks for a summary of the *report*, not to extract or process confidential details separately.

print("\nConfidentiality Consideration: The prompts are designed to summarize the provided text without introducing or requiring external confidential information. Always review the content of your reports and the capabilities/policies of the AI model when handling sensitive data.")

# Simulate the API call with the refined prompt
try:
    if openai:
        print("\nCalling API with Refined Prompt...")
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo", # Or another appropriate model
            messages=[
                {"role": "system", "content": "You are a helpful assistant that provides concise executive summaries."},
                {"role": "user", "content": refined_prompt}
            ]
        )
        refined_summary = response.choices[0].message.content
        print("\nRefined AI Summary (Actual API Call):")
        print(refined_summary)
    else:
         print("\nSkipping refined API call as client is not initialized.")
         refined_summary = "Simulated Refined Summary: Q2 audit shows 12% carbon reduction (solar upgrades) and 6% water increase (manufacturing). Recommend piloting water recycling and publishing ESG metrics in annual report."
         print(refined_summary)

except Exception as e:
     print(f"\nError during refined API call: {e}")
     refined_summary = "Simulated: Error encountered during refined summarization."

