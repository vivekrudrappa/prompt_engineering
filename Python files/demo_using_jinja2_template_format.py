# -*- coding: utf-8 -*-
"""Demo_Using_Jinja2_Template_Format.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NL7TZ_9qEczcaATRKhx9VMBFoC1PMf0Q

# __Demo: Using Jinja2 Template Format__

## __Steps to Perform:__
Step 1: Define a Template Using the Jinja2 Format

Step 2: Create a Prompt Using the Jinja2 Template

Step 3: Use the Prompt to Generate a Question

### __Step 1: Define a Template Using the Jinja2 Format__
- This line defines a template string using Jinja2 syntax.
- The __{{ adjective }}__ and __{{ topic }}__ are placeholders that can be filled with different values to create varied sentences or prompts.
"""

from langchain.prompts import PromptTemplate
jinja2_template = "Give me a {{ adjective }} fact about {{ topic }}"

"""### __Step 2: Create a Prompt Using the Jinja2 Template__
- This line suggests creating a __PromptTemplate__ object from the Jinja2 template.
"""

prompt = PromptTemplate.from_template(jinja2_template, template_format="jinja2")

"""### __Step 3: Use the Prompt to Generate a Question__
- The Jinja2 template is used to generate a specific question.
- The placeholders __{{ adjective }}__ and __{{ topic }}__ in the template are replaced with __interesting__ and __space exploration__, respectively.
- Print the question generated from the template.


"""

question = prompt.format(adjective="interesting", topic="space exploration")

print(question)

"""## __Conclusion__
The demo highlights the use of Jinja2 templates to dynamically generate content by defining placeholders within a template, creating a template object, and substituting placeholders with specific values to produce customized questions.

This approach showcases the efficiency of using Jinja2 for creating flexible and tailored content across various applications.
"""